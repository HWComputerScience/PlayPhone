/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };


  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	int msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }

}


#include "../PlayPhone/openpad.h"


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "openpad_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_OP_1DEBUG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_BUFFER_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1024);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_START_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(47810);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_BUTTON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_DPAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_JOYSTICK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_IMAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_BUTTON_1A_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_BUTTON_1B_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_BUTTON_1X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_BUTTON_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_ACTION_1DOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_ACTION_1MOVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_ACTION_1UP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_sendMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  TCPSocket *arg1 = (TCPSocket *) 0 ;
  openpad::Serializable *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(TCPSocket **)&jarg1; 
  arg2 = *(openpad::Serializable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openpad::Serializable & reference is null");
    return ;
  } 
  openpad::sendMsg(arg1,*arg2);
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1socketID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->socketID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_Client_1socketID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  result = (int) ((arg1)->socketID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1sock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  TCPSocket *arg2 = (TCPSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  arg2 = *(TCPSocket **)&jarg2; 
  if (arg1) (arg1)->sock = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Client_1sock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  TCPSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  result = (TCPSocket *) ((arg1)->sock);
  *(TCPSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1serv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  openpad::Server *arg2 = (openpad::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::Client **)&jarg1; 
  arg2 = *(openpad::Server **)&jarg2; 
  if (arg1) (arg1)->serv = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Client_1serv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  openpad::Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  result = (openpad::Server *) ((arg1)->serv);
  *(openpad::Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1userData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Client_1userData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  result = (void *) ((arg1)->userData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1shouldRun_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->shouldRun = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_Client_1shouldRun_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  result = (bool) ((arg1)->shouldRun);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1hasJoined_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasJoined = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_Client_1hasJoined_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  result = (bool) ((arg1)->hasJoined);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1clientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  shared_ptr< openpad::IDObject > *arg2 = (shared_ptr< openpad::IDObject > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  arg2 = *(shared_ptr< openpad::IDObject > **)&jarg2; 
  if (arg1) (arg1)->clientID = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Client_1clientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  shared_ptr< openpad::IDObject > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  result = (shared_ptr< openpad::IDObject > *)& ((arg1)->clientID);
  *(shared_ptr< openpad::IDObject > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1Client(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  TCPSocket *arg1 = (TCPSocket *) 0 ;
  int arg2 ;
  openpad::Server *arg3 = (openpad::Server *) 0 ;
  openpad::Client *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(TCPSocket **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(openpad::Server **)&jarg3; 
  result = (openpad::Client *)new openpad::Client(arg1,arg2,arg3);
  *(openpad::Client **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  openpad::Serializable *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::Client **)&jarg1; 
  arg2 = *(openpad::Serializable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openpad::Serializable & reference is null");
    return ;
  } 
  (arg1)->send(*arg2);
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  openpad::ControlObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::Client **)&jarg1; 
  arg2 = *(openpad::ControlObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openpad::ControlObject & reference is null");
    return ;
  } 
  (arg1)->setControls(*arg2);
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Client_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Client **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->disconnect(arg2);
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1Client(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::Client *arg1 = (openpad::Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::Client **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Server_1currentClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Server **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->currentClientID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_Server_1currentClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Server **)&jarg1; 
  result = (int) ((arg1)->currentClientID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Server_1clients_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  map< int,openpad::Client & > *arg2 = (map< int,openpad::Client & > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Server **)&jarg1; 
  arg2 = *(map< int,openpad::Client & > **)&jarg2; 
  if (arg1) (arg1)->clients = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Server_1clients_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  map< int,openpad::Client & > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Server **)&jarg1; 
  result = (map< int,openpad::Client & > *)& ((arg1)->clients);
  *(map< int,openpad::Client & > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Server_1shouldRun_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Server **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->shouldRun = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_Server_1shouldRun_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Server **)&jarg1; 
  result = (bool) ((arg1)->shouldRun);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Server_1handler_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  openpad::ServerHandler *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::Server **)&jarg1; 
  arg2 = *(openpad::ServerHandler **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openpad::ServerHandler & reference is null");
    return ;
  } 
  if (arg1) (arg1)->handler = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Server_1handler_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  openpad::ServerHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Server **)&jarg1; 
  result = (openpad::ServerHandler *) &(openpad::ServerHandler &) ((arg1)->handler);
  *(openpad::ServerHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1Server(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::ServerHandler *arg1 = 0 ;
  openpad::Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ServerHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openpad::ServerHandler & reference is null");
    return 0;
  } 
  result = (openpad::Server *)new openpad::Server(*arg1);
  *(openpad::Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Server_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Server **)&jarg1; 
  (arg1)->start();
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Server_1refreshClients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Server **)&jarg1; 
  (arg1)->refreshClients();
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Server_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  openpad::ControlObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::Server **)&jarg1; 
  arg2 = *(openpad::ControlObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openpad::ControlObject & reference is null");
    return ;
  } 
  (arg1)->setControls(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Server_1handleRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  openpad::Request *arg2 = 0 ;
  openpad::Client *arg3 = (openpad::Client *) 0 ;
  openpad::Response result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(openpad::Server **)&jarg1; 
  arg2 = *(openpad::Request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openpad::Request & reference is null");
    return 0;
  } 
  arg3 = *(openpad::Client **)&jarg3; 
  result = (arg1)->handleRequest(*arg2,arg3);
  *(openpad::Response **)&jresult = new openpad::Response((const openpad::Response &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Server_1handleResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  openpad::Response *arg2 = 0 ;
  openpad::Client *arg3 = (openpad::Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(openpad::Server **)&jarg1; 
  arg2 = *(openpad::Response **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openpad::Response & reference is null");
    return ;
  } 
  arg3 = *(openpad::Client **)&jarg3; 
  (arg1)->handleResponse(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1Server(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::Server *arg1 = (openpad::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::Server **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_getStringFromJSON(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  Value *arg1 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Value **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Value & reference is null");
    return 0;
  } 
  result = (char *)openpad::getStringFromJSON(*arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Serializable_1serializeJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  openpad::Serializable *arg1 = (openpad::Serializable *) 0 ;
  Document::AllocatorType *arg2 = 0 ;
  Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Serializable **)&jarg1; 
  arg2 = *(Document::AllocatorType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Document::AllocatorType & reference is null");
    return 0;
  } 
  result = (Value *) &(arg1)->serializeJSON(*arg2);
  *(Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_Serializable_1getJSONString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::Serializable *arg1 = (openpad::Serializable *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Serializable **)&jarg1; 
  result = (char *)(arg1)->getJSONString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Serializable_1JSONvalue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openpad::Serializable *arg1 = (openpad::Serializable *) 0 ;
  Value arg2 ;
  Value *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Serializable **)&jarg1; 
  argp2 = *(Value **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Value");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->JSONvalue = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Serializable_1JSONvalue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::Serializable *arg1 = (openpad::Serializable *) 0 ;
  Value result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Serializable **)&jarg1; 
  result =  ((arg1)->JSONvalue);
  *(Value **)&jresult = new Value((const Value &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Serializable_1hasSerialized_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openpad::Serializable *arg1 = (openpad::Serializable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Serializable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasSerialized = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_Serializable_1hasSerialized_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openpad::Serializable *arg1 = (openpad::Serializable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Serializable **)&jarg1; 
  result = (bool) ((arg1)->hasSerialized);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1Serializable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::Serializable *arg1 = (openpad::Serializable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::Serializable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Request_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::Request *arg1 = (openpad::Request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->operation = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_Request_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::Request *arg1 = (openpad::Request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Request **)&jarg1; 
  result = (int) ((arg1)->operation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Request_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::Request *arg1 = (openpad::Request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_Request_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::Request *arg1 = (openpad::Request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Request **)&jarg1; 
  result = (int) ((arg1)->timestamp);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Request_1root_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openpad::Request *arg1 = (openpad::Request *) 0 ;
  Document *arg2 = (Document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Request **)&jarg1; 
  arg2 = *(Document **)&jarg2; 
  if (arg1) (arg1)->root = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Request_1root_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::Request *arg1 = (openpad::Request *) 0 ;
  Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Request **)&jarg1; 
  result = (Document *) ((arg1)->root);
  *(Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1Request_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openpad::Request *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openpad::Request *)new openpad::Request();
  *(openpad::Request **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1Request_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  openpad::Request *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (openpad::Request *)new openpad::Request(arg1);
  *(openpad::Request **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_Request_1parseJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  openpad::Request *arg1 = (openpad::Request *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseJSON((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Request_1serializeJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  openpad::Request *arg1 = (openpad::Request *) 0 ;
  Document::AllocatorType *arg2 = 0 ;
  Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Request **)&jarg1; 
  arg2 = *(Document::AllocatorType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Document::AllocatorType & reference is null");
    return 0;
  } 
  result = (Value *) &(arg1)->serializeJSON(*arg2);
  *(Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1Request(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::Request *arg1 = (openpad::Request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::Request **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Response_1statusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::Response *arg1 = (openpad::Response *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Response **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_Response_1statusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::Response *arg1 = (openpad::Response *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Response **)&jarg1; 
  result = (int) ((arg1)->statusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Response_1statusMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::Response *arg1 = (openpad::Response *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Response **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->statusMsg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_Response_1statusMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::Response *arg1 = (openpad::Response *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Response **)&jarg1; 
  result = (std::string *) & ((arg1)->statusMsg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_Response_1root_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openpad::Response *arg1 = (openpad::Response *) 0 ;
  Document *arg2 = (Document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Response **)&jarg1; 
  arg2 = *(Document **)&jarg2; 
  if (arg1) (arg1)->root = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Response_1root_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::Response *arg1 = (openpad::Response *) 0 ;
  Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Response **)&jarg1; 
  result = (Document *) ((arg1)->root);
  *(Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1Response_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openpad::Response *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openpad::Response *)new openpad::Response();
  *(openpad::Response **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1Response_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  openpad::Response *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (openpad::Response *)new openpad::Response(arg1,(char const *)arg2);
  *(openpad::Response **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_Response_1parseJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  openpad::Response *arg1 = (openpad::Response *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Response **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseJSON((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Response_1serializeJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  openpad::Response *arg1 = (openpad::Response *) 0 ;
  Document::AllocatorType *arg2 = 0 ;
  Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::Response **)&jarg1; 
  arg2 = *(Document::AllocatorType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Document::AllocatorType & reference is null");
    return 0;
  } 
  result = (Value *) &(arg1)->serializeJSON(*arg2);
  *(Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1Response(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::Response *arg1 = (openpad::Response *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::Response **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1IDObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openpad::IDObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openpad::IDObject *)new openpad::IDObject();
  *(openpad::IDObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_IDObject_1serializeJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  Document::AllocatorType *arg2 = 0 ;
  Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  arg2 = *(Document::AllocatorType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Document::AllocatorType & reference is null");
    return 0;
  } 
  result = (Value *) &(arg1)->serializeJSON(*arg2);
  *(Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_IDObject_1parseJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  Value *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  arg2 = *(Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Value & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->parseJSON(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_IDObject_1phoneid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->phoneid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_IDObject_1phoneid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  result = (std::string *) & ((arg1)->phoneid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_IDObject_1firstname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->firstname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_IDObject_1firstname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  result = (std::string *) & ((arg1)->firstname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_IDObject_1lastname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->lastname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_IDObject_1lastname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  result = (std::string *) & ((arg1)->lastname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_IDObject_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_IDObject_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_IDObject_1fbuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->fbuid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_IDObject_1fbuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::IDObject **)&jarg1; 
  result = (std::string *) & ((arg1)->fbuid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1IDObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::IDObject *arg1 = (openpad::IDObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::IDObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1GameObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openpad::GameObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openpad::GameObject *)new openpad::GameObject();
  *(openpad::GameObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_GameObject_1serializeJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  Document::AllocatorType *arg2 = 0 ;
  Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  arg2 = *(Document::AllocatorType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Document::AllocatorType & reference is null");
    return 0;
  } 
  result = (Value *) &(arg1)->serializeJSON(*arg2);
  *(Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_GameObject_1parseJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  Value *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  arg2 = *(Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Value & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->parseJSON(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_GameObject_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_GameObject_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_GameObject_1openslots_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->openslots = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_GameObject_1openslots_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  result = (int) ((arg1)->openslots);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_GameObject_1filledslots_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->filledslots = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_GameObject_1filledslots_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  result = (int) ((arg1)->filledslots);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_GameObject_1icon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->icon = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_GameObject_1icon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  result = (std::string *) & ((arg1)->icon);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_GameObject_1desc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->desc = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_GameObject_1desc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::GameObject **)&jarg1; 
  result = (std::string *) & ((arg1)->desc);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1GameObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::GameObject *arg1 = (openpad::GameObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::GameObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1serializeJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  Document::AllocatorType *arg2 = 0 ;
  Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  arg2 = *(Document::AllocatorType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Document::AllocatorType & reference is null");
    return 0;
  } 
  result = (Value *) &(arg1)->serializeJSON(*arg2);
  *(Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1parseJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  Value *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  arg2 = *(Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Value & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->parseJSON(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  result = (double) ((arg1)->w);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1h_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1h_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  result = (double) ((arg1)->h);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1FrameObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openpad::FrameObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openpad::FrameObject *)new openpad::FrameObject();
  *(openpad::FrameObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1FrameObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::FrameObject *arg1 = (openpad::FrameObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::FrameObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1serializeJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  Document::AllocatorType *arg2 = 0 ;
  Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  arg2 = *(Document::AllocatorType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Document::AllocatorType & reference is null");
    return 0;
  } 
  result = (Value *) &(arg1)->serializeJSON(*arg2);
  *(Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1parseJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  Value *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  arg2 = *(Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Value & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->parseJSON(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1frame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  openpad::FrameObject *arg2 = (openpad::FrameObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  arg2 = *(openpad::FrameObject **)&jarg2; 
  if (arg1) (arg1)->frame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1frame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  openpad::FrameObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  result = (openpad::FrameObject *)& ((arg1)->frame);
  *(openpad::FrameObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1controlID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->controlID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1controlID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  result = (int) ((arg1)->controlID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1img_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->img = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1img_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  result = (std::string *) & ((arg1)->img);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1ControlObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openpad::ControlObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openpad::ControlObject *)new openpad::ControlObject();
  *(openpad::ControlObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1ControlObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::ControlObject *arg1 = (openpad::ControlObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::ControlObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_PadConfig_1serializeJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  openpad::PadConfig *arg1 = (openpad::PadConfig *) 0 ;
  Document::AllocatorType *arg2 = 0 ;
  Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadConfig **)&jarg1; 
  arg2 = *(Document::AllocatorType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Document::AllocatorType & reference is null");
    return 0;
  } 
  result = (Value *) &(arg1)->serializeJSON(*arg2);
  *(Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_PadConfig_1parseJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  openpad::PadConfig *arg1 = (openpad::PadConfig *) 0 ;
  Value *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadConfig **)&jarg1; 
  arg2 = *(Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Value & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->parseJSON(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_PadConfig_1addControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::PadConfig *arg1 = (openpad::PadConfig *) 0 ;
  openpad::ControlObject *arg2 = (openpad::ControlObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::PadConfig **)&jarg1; 
  arg2 = *(openpad::ControlObject **)&jarg2; 
  (arg1)->addControl(arg2);
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_PadConfig_1controls_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openpad::PadConfig *arg1 = (openpad::PadConfig *) 0 ;
  std::vector< openpad::ControlObject * > *arg2 = (std::vector< openpad::ControlObject * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadConfig **)&jarg1; 
  arg2 = *(std::vector< openpad::ControlObject * > **)&jarg2; 
  if (arg1) (arg1)->controls = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_PadConfig_1controls_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::PadConfig *arg1 = (openpad::PadConfig *) 0 ;
  std::vector< openpad::ControlObject * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadConfig **)&jarg1; 
  result = (std::vector< openpad::ControlObject * > *)& ((arg1)->controls);
  *(std::vector< openpad::ControlObject * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_PadConfig_1bgimg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openpad::PadConfig *arg1 = (openpad::PadConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->bgimg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_PadConfig_1bgimg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::PadConfig *arg1 = (openpad::PadConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->bgimg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1PadConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::PadConfig *arg1 = (openpad::PadConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::PadConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_PadUpdateObject_1parseJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  Value *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  arg2 = *(Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Value & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->parseJSON(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_PadUpdateObject_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_PadUpdateObject_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_PadUpdateObject_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_PadUpdateObject_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_PadUpdateObject_1controlid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->controlid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_PadUpdateObject_1controlid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  result = (int) ((arg1)->controlid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_PadUpdateObject_1action_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->action = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_PadUpdateObject_1action_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  result = (int) ((arg1)->action);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1PadUpdateObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openpad::PadUpdateObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openpad::PadUpdateObject *)new openpad::PadUpdateObject();
  *(openpad::PadUpdateObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1PadUpdateObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::PadUpdateObject *arg1 = (openpad::PadUpdateObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::PadUpdateObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1ButtonControl(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  openpad::ButtonControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (openpad::ButtonControl *)new openpad::ButtonControl(arg1,arg2,arg3,arg4,arg5);
  *(openpad::ButtonControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_ButtonControl_1serializeJSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  openpad::ButtonControl *arg1 = (openpad::ButtonControl *) 0 ;
  Document::AllocatorType *arg2 = 0 ;
  Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ButtonControl **)&jarg1; 
  arg2 = *(Document::AllocatorType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Document::AllocatorType & reference is null");
    return 0;
  } 
  result = (Value *) &(arg1)->serializeJSON(*arg2);
  *(Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ButtonControl_1btntype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openpad::ButtonControl *arg1 = (openpad::ButtonControl *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ButtonControl **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->btntype = arg2;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_ButtonControl_1btntype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::ButtonControl *arg1 = (openpad::ButtonControl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ButtonControl **)&jarg1; 
  result = (int) ((arg1)->btntype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1ButtonControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::ButtonControl *arg1 = (openpad::ButtonControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::ButtonControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1DPadControl(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jint jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  openpad::DPadControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (openpad::DPadControl *)new openpad::DPadControl(arg1,arg2,arg3,arg4);
  *(openpad::DPadControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1DPadControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::DPadControl *arg1 = (openpad::DPadControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::DPadControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1JoystickControl(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jint jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  openpad::JoystickControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (openpad::JoystickControl *)new openpad::JoystickControl(arg1,arg2,arg3,arg4);
  *(openpad::JoystickControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1JoystickControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::JoystickControl *arg1 = (openpad::JoystickControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::JoystickControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1serv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  openpad::Server *arg2 = (openpad::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  arg2 = *(openpad::Server **)&jarg2; 
  if (arg1) (arg1)->serv = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1serv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  openpad::Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  result = (openpad::Server *) ((arg1)->serv);
  *(openpad::Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1onStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  (arg1)->onStart();
}


SWIGEXPORT jboolean JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1canJoin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  openpad::Client *arg2 = (openpad::Client *) 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  arg2 = *(openpad::Client **)&jarg2; 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->canJoin(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1getDesc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  result = (arg1)->getDesc();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1getIconFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  result = (arg1)->getIconFilePath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1getFilledSlots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  result = (int)(arg1)->getFilledSlots();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1getOpenSlots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  result = (int)(arg1)->getOpenSlots();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1onJoin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  openpad::Client *arg2 = (openpad::Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  arg2 = *(openpad::Client **)&jarg2; 
  (arg1)->onJoin(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1getDefaultControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  SwigValueWrapper< openpad::PadConfig > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  result = (arg1)->getDefaultControls();
  *(openpad::PadConfig **)&jresult = new openpad::PadConfig((const openpad::PadConfig &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1onDisconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  openpad::Client *arg2 = (openpad::Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  arg2 = *(openpad::Client **)&jarg2; 
  (arg1)->onDisconnect(arg2);
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_ServerHandler_1onPadUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  openpad::Client *arg2 = (openpad::Client *) 0 ;
  openpad::PadUpdateObject arg3 ;
  openpad::PadUpdateObject *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  arg2 = *(openpad::Client **)&jarg2; 
  argp3 = *(openpad::PadUpdateObject **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null openpad::PadUpdateObject");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->onPadUpdate(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_new_1ServerHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openpad::ServerHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openpad::ServerHandler *)new openpad::ServerHandler();
  *(openpad::ServerHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_openpad_server_openpadJNI_delete_1ServerHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openpad::ServerHandler *arg1 = (openpad::ServerHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openpad::ServerHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Request_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::Serializable **)&baseptr = *(openpad::Request **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_Response_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::Serializable **)&baseptr = *(openpad::Response **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_IDObject_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::Serializable **)&baseptr = *(openpad::IDObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_GameObject_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::Serializable **)&baseptr = *(openpad::GameObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_FrameObject_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::Serializable **)&baseptr = *(openpad::FrameObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_ControlObject_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::Serializable **)&baseptr = *(openpad::ControlObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_PadConfig_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::Serializable **)&baseptr = *(openpad::PadConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_ButtonControl_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::ControlObject **)&baseptr = *(openpad::ButtonControl **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_DPadControl_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::ControlObject **)&baseptr = *(openpad::DPadControl **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_openpad_server_openpadJNI_JoystickControl_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openpad::ControlObject **)&baseptr = *(openpad::JoystickControl **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

